"" General
set number	"" Show line numbers
set linebreak	"" Break lines at word (requires Wrap lines)
set showbreak=+++	"" Wrap-broken line prefix
set textwidth=0 "" Line wrap (number of cols)
set showmatch	"" Highlight matching brace
set visualbell	"" Use visual bell (no beeping)

set nowrap

set hlsearch	"" Highlight all search results
set smartcase	"" Enable smart-case search
set ignorecase	"" Always case-insensitive
set incsearch	"" Searches for strings incrementally

set autoindent	"" Auto-indent new lines
set shiftwidth=2	"" Number of auto-indent spaces
set smartindent	"" Enable smart-indent
set smarttab	"" Enable smart-tabs
set softtabstop=2	"" Number of spaces per Tab

"" Advanced
set ruler	"" Show row and column ruler information

set undolevels=1000	"" Number of undo levels
set backspace=indent,eol,start	"" Backspace behaviour

"" Generated by VimConfig.com
""set runtimepath="$VIMRUNTIME"

"" makes sure to load all the files in "autoload" before loading the rest of the vimrc
"" courtesy of DrAl
"" https://stackoverflow.com/a/4500936

"" this line loads plug.vim before the other files in the autoload directory,
"" because some of the other files depend on plug.vim being loaded

exe join(["source ",expand($VIMTIDALROOT),"/config/plug.vim"],"")

call plug#begin(expand($PACKAGEDIR))
    Plug 'tidalcycles/vim-tidal'
    Plug 'jiangmiao/auto-pairs'
    Plug 'supercollider/scvim'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-surround'
    Plug 'preservim/nerdtree'
call plug#end()

autocmd FileType tidal setlocal commentstring=--\ %s
map <C-_> <Plug>Commentary

tnoremap <Esc> <C-\><C-n>

let tidalRoot = expand($VIMTIDALROOT)

exec "set dictionary+=" . tidalRoot."/dict/samples_dict"
set complete=k,.,w,b,u,t

augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
augroup END

filetype plugin on
syntax on

""" When the filetype is FILETYPE then make AutoPairs only match for parenthesis
au Filetype tidal let b:AutoPairs = {"(": ")",'"':'"',"[":"]","{":"}","<":">"}

set nocp

"""set noswapfile "feel free to change


"" The Default NERDTree Bookmarks file
let g:NERDTreeBookmarksFile= expand($BOOKMARKSFILE)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Misc Bindings 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""Autopairs
let g:AutoPairsFlyMode = 0

"""NERDTree

nmap <C-D> :NERDTreeToggle <CR>
xmap <C-D> :NERDTreeToggle <CR>

let NERDTreeShowBookmarks=1

" many many thanks to Ingo Karkat
" https://stackoverflow.com/a/16378375
"
"
"
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Tidal mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function BindTidalEffect(effect, binding, prefix, ...)
  let l:value= a:0>=1 ? a:1 : "(8/8)"
  let l:postCommand = a:0>=2 ? a:2 : "r"
  let l:effectString= a:prefix." ".a:effect." ".value." <esc>F(l".postCommand
  let l:effectStringParen="(".a:prefix." ".a:effect." ".value." <esc>F(l".postCommand
  exec "nmap <space>".a:binding." a".effectString
  exec "nmap <space><space>".a:binding." a".effectStringParen
endfunction


function BindTidalObject(object, binding, prefix, ...)
  let l:effectString= a:prefix." ".a:effect." ".value." <esc>F(l".postCommand
  let l:effectStringParen="(".a:effect." ".value." <esc>F(l".postCommand
  exec "nmap <space>h".a:binding." a".effectString
  exec "nmap <space><space>h".a:binding." a".effectStringParen
endfunction


"""" audio effects

"" basic stuff
call BindTidalEffect("speed","S","&")
call BindTidalEffect("gain","G","&")
call BindTidalEffect("pan","P","#")
call BindTidalEffect("accelerate","A","#")

"" envelope related
call BindTidalEffect("att","ea","#")
call BindTidalEffect("hold","eh","#")
call BindTidalEffect("rel","er","#")
""" considering this chief to the contour of the sound
call BindTidalEffect("sus","es","#")

"" filters
call BindTidalEffect("lpf","fl","#","(2000*(8/8))")
call BindTidalEffect("lresonance","flr","#")
call BindTidalEffect("lpq","flq","#")

call BindTidalEffect("hpf","fh","#","(2000*(8/8))")
call BindTidalEffect("hresonance","fhr","#")
call BindTidalEffect("hpq","fhq","#")

call BindTidalEffect("bpf","fb","#","(2000*(8/8))")
call BindTidalEffect("bpfq","fbq","#")

call BindTidalEffect("djf","fd","#","(2000*(8/8))")

call BindTidalEffect("vowel","fv","#",'("")',"aa<esc>r")

"" delay/verb
call BindTidalEffect("delay","rd","#")
call BindTidalEffect("delayt","rdt","#")
call BindTidalEffect("delayfb","rdf","#")

call BindTidalEffect("room","r","#")
call BindTidalEffect("size","rs","#")
call BindTidalEffect("size","rd","#")

"" distortions
call BindTidalEffect("shape","ds","#")
call BindTidalEffect("distort","dd","#")
call BindTidalEffect("crush","dc","#")
call BindTidalEffect("coarse","do","#")
call BindTidalEffect("krush","dk","#")
call BindTidalEffect("triode","dt","#")
call BindTidalEffect("waveloss","dw","#")

call BindTidalEffect("binshift","db","#")
call BindTidalEffect("binshift","db","#")

"" modulators
call BindTidalEffect("leslie","le","#")
call BindTidalEffect("lrate","lr","#")
call BindTidalEffect("lsize","ls","#")

call BindTidalEffect("tremolo","lt","#")


""" objects

"""" Pattern functions

"" fast/slow                    \/      \/ ez way to reorder funcs
call BindTidalEffect("fast","f","","(1) $")
call BindTidalEffect("slow","s","","(1) $")

call BindTidalEffect("linger","l","","(8/8) $")
call BindTidalEffect("ply","p","","(1/1) $")
call BindTidalEffect("iter","i","","(1/1) $")
call BindTidalEffect("degradeBy","d","","(4/8) $")


"""""""" Manuvering

let searchstring="[\\$\|\\#\|&\||+]"

nmap <silent> H b:call search(searchstring,'eb')<CR>l
nmap <silent> L :call search(searchstring,'e')<CR>l

let tidal_no_mappings = 1

xmap <c-l> <Plug>TidalParagraphSend
nmap <c-l> <Plug>TidalParagraphSend

xmap <c-k> <Plug>TidalLineSend
nmap <c-k> <Plug>TidalLineSend


"for when you want to send text that isn't just a line or a paragraph
xmap <c-j> <Plug>TidalMotionSend
nmap <c-j> <Plug>TidalMotionSend

xmap <m-h> :TidalHush <Return>
nmap <m-h> :TidalHush <Return>

let g:tidal_preserve_curpos = 1

"" for alt+ any number key, (ie. alt+1, alt+2, etc...)
"" it will evaluate the first d1, d2, etc... it can find that is below your cursor
let i = 1
while i <= 9
  execute 'nnoremap <m-'.i.'> :TidalPlay'.i.'<cr>'
  execute 'nmap <space>'.i.' :TidalJumpPlay'.i.'<cr>'
  let i += 1
endwhile

function! s:TidalJumpPlay(stream)
  silent execute "normal! `".a:stream
  let l:cursor_pos = getpos(".")
  silent execute "normal! vip:TidalSend\<cr>"
  call setpos('.', cursor_pos)
endfunction

command! -nargs=1 TidalJumpPlay call s:TidalJumpPlay(<args>)


function! s:TidalPlayBackwards(stream)
  let res = search('d' . stream,"b")
  let l:cursor_pos = getpos(".")
  if res > 0
    silent execute "normal! vip:TidalSend\<cr>"
    silent execute "normal! vip"
    call s:TidalFlashVisualSelection()
  else
    echo "d" . a:stream . " was not found"
  endif
  call setpos('.', cursor_pos)
endfunction

command! -nargs=1 TidalPlayBackwards call s:TidalPlayBackwards(<args>)

execute 'nnoremap <m-!> :TidalPlayBackwards1 <cr>'
execute 'nnoremap <m-@> :TidalPlayBackwards2 <cr>'
execute 'nnoremap <m-#> :TidalPlayBackwards3 <cr>'
execute 'nnoremap <m-$> :TidalPlayBackwards4 <cr>'
execute 'nnoremap <m-%> :TidalPlayBackwards5 <cr>'
execute 'nnoremap <m-^> :TidalPlayBackwards6 <cr>'
execute 'nnoremap <m-&> :TidalPlayBackwards7 <cr>'
execute 'nnoremap <m-*> :TidalPlayBackwards8 <cr>'
execute 'nnoremap <m-(> :TidalPlayBackwards9 <cr>'

"" resets the cycle counter
execute 'nnoremap <m-r> :TidalSend1 resetCycles <cr>'

"" resets any effects applied globally
execute 'nnoremap <m-)> :TidalSend1 all $ id <cr>'

execute 'nnoremap <C-s> :TidalSend1 p "midictl" $ midicmd "stop" # s "midi" <cr>'
execute 'nnoremap <C-m-S> :TidalSend1 p "midictl" $ midicmd "start" # s "midi" <cr>'

"" leading to..

"""" applying effects globally
"""" applying effects globally
"""" applying effects globally
"""" applying effects globally

